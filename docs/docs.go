// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/advantages/all": {
            "get": {
                "description": "Get all advantages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advantages"
                ],
                "summary": "Get advantages",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Advantage"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/advantages/create": {
            "post": {
                "description": "Create advantage",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advantages"
                ],
                "summary": "Create Advantage",
                "parameters": [
                    {
                        "type": "file",
                        "description": "image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "title of advantage",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/advantages/{advantageId}": {
            "delete": {
                "description": "Delete advantage by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advantages"
                ],
                "summary": "Delete Advantage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "advantage id",
                        "name": "advantageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update advantage by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advantages"
                ],
                "summary": "Update Advantage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "advantage id",
                        "name": "advantageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image file",
                        "name": "image",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "title of advantage",
                        "name": "title",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Advantage"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/chat": {
            "get": {
                "description": "Retrieve all chats for a user by their user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Get Chats",
                "responses": {
                    "200": {
                        "description": "List of chats for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Chat"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/chat/ws/{chatId}": {
            "get": {
                "description": "Handles WebSocket connections, retrieves chat history, and supports real-time messaging.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webSocket"
                ],
                "summary": "Establishes a WebSocket connection for chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token for authentication",
                        "name": "token",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Chat ID to retrieve messages from",
                        "name": "chatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token or claims",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/chat/{chatId}": {
            "get": {
                "description": "Retrieve all messages for a chat by its chat ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Get Messages by Chat ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the chat",
                        "name": "chatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages for the chat",
                        "schema": {
                            "$ref": "#/definitions/MessageEntity"
                        }
                    },
                    "404": {
                        "description": "Chat not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/chat/{ownerId}": {
            "post": {
                "description": "Send a message to a specified chat by its owner ID and user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chats"
                ],
                "summary": "Create a message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the chat owner",
                        "name": "ownerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Message content to send",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MessageEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message sent!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/confirm/email/change/otp/{otp}": {
            "post": {
                "description": "Verify the one-time password (OTP) provided by the user for email change confirmation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm Email Change OTP",
                "parameters": [
                    {
                        "type": "string",
                        "description": "One-Time Password (OTP)",
                        "name": "otp",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP confirmed successfully!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - could not verify OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/confirm/email/otp/{otp}": {
            "post": {
                "description": "Verify the one-time password (OTP) provided by the user for email confirmation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm One-Time Password (OTP)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "One-Time Password (OTP)",
                        "name": "otp",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP confirmed successfully!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - could not verify OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/confirm/password/otp": {
            "post": {
                "description": "Verify the one-time password (OTP) provided by the user for password changing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm One-Time Password (OTP)",
                "parameters": [
                    {
                        "description": "Request body with email and otp",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PasswordOTP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP confirmed successfully!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid OTP or missing fields",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - could not verify OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/contract": {
            "get": {
                "description": "Retrieve all contracts for a user by their user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracts"
                ],
                "summary": "Get All Contracts",
                "responses": {
                    "200": {
                        "description": "ok\" // Adjust the type based on your actual Contract struct",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Contract"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/contract/{stayId}": {
            "put": {
                "description": "Update a contract for a specific stay by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracts"
                ],
                "summary": "Update an Existing Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the stay",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Contract details including dateStart and dateEnd",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContractResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated contract information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new contract for a specific stay by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contracts"
                ],
                "summary": "Add a New Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the stay",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Contract details including dateStart and dateEnd",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContractResponse"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Contract created successfully with message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/email/change/otp": {
            "get": {
                "description": "Generate and send a one-time password (OTP) to the user's current email for changing their email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emailConfirmation"
                ],
                "summary": "Send OTP for Email Change",
                "responses": {
                    "200": {
                        "description": "otp for email change created!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid user ID in context",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - failed to send OTP for email change",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/email/otp": {
            "get": {
                "description": "Generate a one-time password (OTP) for email confirmation by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emailConfirmation"
                ],
                "summary": "Create One-Time Password (OTP)",
                "responses": {
                    "200": {
                        "description": "success in creating otp for email verification!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - could not generate OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/favourites": {
            "get": {
                "description": "Retrieves a list of favourite stays for the user based on the user ID from context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourites"
                ],
                "summary": "Get all favourite stays for a user",
                "responses": {
                    "200": {
                        "description": "List of favourite stays",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/definitions/StayEntityFav"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/favourites/{stayId}": {
            "post": {
                "description": "Add a stay to the user's favourites list using their user ID from context and the stay ID from the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourites"
                ],
                "summary": "Add a stay to user favourites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stay to be added to favourites",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added to favourites",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a stay from the user's favourites list using their user ID from context and the stay ID from the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favourites"
                ],
                "summary": "Remove a stay from user favourites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stay to be removed from favourites",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed from favourites",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/history": {
            "get": {
                "description": "Get all search history for a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "searchHistory"
                ],
                "summary": "Get Search History",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SearchHistory"
                            }
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new entry to the search history for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "searchHistory"
                ],
                "summary": "Create Search History",
                "parameters": [
                    {
                        "description": "Name of the search history entry",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/locations": {
            "get": {
                "description": "Get all locations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get all locations",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Location"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "description": "Find location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Find location by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "location id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update location by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "location id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "location request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LocationEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete location by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "location id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/locations/{locationName}": {
            "get": {
                "description": "Find city by matching name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Find city by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "location name match",
                        "name": "locationName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Location"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticates an existing user and returns a JWT token(claim USER_ID, ROLE_ID)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login an existing user",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/message": {
            "get": {
                "description": "Retrieve all messages for a user by their user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get Messages",
                "responses": {
                    "200": {
                        "description": "List of messages for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MessageEntity"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/message/{messageId}": {
            "get": {
                "description": "Retrieve a single message by its message ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Get Message by Message ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the message",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The message details",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing message by message ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Update an Existing Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the message",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated message content",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MessageEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated message",
                        "schema": {
                            "$ref": "#/definitions/MessageEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a message by its message ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Delete Message by Message ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the message",
                        "name": "messageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Message deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Message not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/password/otp/{email}": {
            "get": {
                "description": "Generate a one-time password (OTP) for resetting the password using the provided email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emailConfirmation"
                ],
                "summary": "Create One-Time Password (OTP) for Password Reset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success in creating otp for password reset!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - could not generate OTP",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/payment": {
            "post": {
                "description": "Create payment (with yookassa model)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Create payment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Idempotence-Key",
                        "name": "Idempotence-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "request yookassa payment",
                        "name": "_",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/yoomodel.Payment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/yoomodel.PaymentRes"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/registration": {
            "post": {
                "description": "Creates a new user account(DEFAULT ROLE_ID=TENANT)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Registration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation": {
            "post": {
                "description": "Create reservation (arrived and departure should be TIMESTAMP type)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Create Reservation",
                "parameters": [
                    {
                        "description": "Create reservation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReservationEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/checkin/{stayId}": {
            "post": {
                "description": "Confirm check-in for a reservation by stay ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Confirm Check-In Reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stay to confirm check-in",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Check-in details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReservationEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully confirmed reservation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/checkout/{stayId}": {
            "post": {
                "description": "Confirm check-out for a reservation by stay ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Confirm Check-Out Reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stay to confirm check-out",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully confirmed checkout reservation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/user/{userID}": {
            "get": {
                "description": "Get reservation by user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Get all Reservations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/{reservationID}": {
            "get": {
                "description": "Get reservation by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Get Reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reservation id",
                        "name": "reservationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Reservation"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete reservation by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Delete Reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "reservation id",
                        "name": "reservationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/reservation/{reservationId}": {
            "put": {
                "description": "Update an existing reservation by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservations"
                ],
                "summary": "Update Reservation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the reservation to update",
                        "name": "reservationId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details to update the reservation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReservationUpdateEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated reservation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays": {
            "get": {
                "description": "Get all stays",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get all stays",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StayResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create stay",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Create Stay",
                "parameters": [
                    {
                        "description": "request stay data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StayEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/images": {
            "post": {
                "description": "Create images (IMPORTANT: not main image). Form data with two rows: stay_id, images in array",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Create images",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "images list in form data",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stay_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/images/main": {
            "post": {
                "description": "Create main image (IMPORTANT: should be one main image). If main image already exists in stay, it will be replaced with this new image. The old replaced image will no longer be the main and \"is_main\" value replaced to false. Request data should be in Form data with two values: images and stay_id. Note, that images row is one image (not array)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Create main image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "images",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stay_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/images/main/{stayId}": {
            "get": {
                "description": "Get main stays image by stay id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get main stays image by stay id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/StayImage"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/images/{imageId}": {
            "delete": {
                "description": "Delete image by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Delete image by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay image id",
                        "name": "imageId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/images/{stayId}": {
            "get": {
                "description": "Get stays images by stay id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get all stays images by stay id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StayImage"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/location/{locationId}": {
            "get": {
                "description": "get stays by location id. Handler additionally checks is location exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get Stays by location id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "locationId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Stay"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/report": {
            "get": {
                "description": "Retrieves all stay reports for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReports"
                ],
                "summary": "Get all stay reports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StaysReportEntity"
                            }
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"user not logged in\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"message\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/report/{reportId}": {
            "delete": {
                "description": "Deletes a specific stay report by report ID",
                "tags": [
                    "staysReports"
                ],
                "summary": "Delete a stay report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "reportId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"message\": \"Stay report was deleted\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"user not logged in\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"message\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates specific fields of a stay report, such as title, description, or image",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReports"
                ],
                "summary": "Partially update a stay report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "reportId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated title",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Image file (JPEG or PNG)",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated stays report object",
                        "schema": {
                            "$ref": "#/definitions/StaysReportEntity"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/report/{stayId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a specific stay report associated with the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReports"
                ],
                "summary": "Retrieve stay report by user ID",
                "responses": {
                    "200": {
                        "description": "Retrieved stay report object",
                        "schema": {
                            "$ref": "#/definitions/StayReport"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"user not logged in\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"report not found\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"could not fetch report\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a report for a specific stay, including an optional image and required details like title and description.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReports"
                ],
                "summary": "Create a new stay report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stay being reported",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Title of the report",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the report",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "image file (JPEG or PNG)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Confirmation message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error message for invalid input or unsupported image type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Error message for unauthorized access",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/stays/search": {
            "get": {
                "description": "Search stay by filtration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Search",
                "parameters": [
                    {
                        "description": "request search data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_imperatorofdwelling_Full-backend_internal_domain_models_stays.Search"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/user/{userId}": {
            "get": {
                "description": "Get stays by user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get all stays by user id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Stay"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/stays/{stayId}": {
            "get": {
                "description": "get stay",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Get Stay by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Stay"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update stay by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Update Stay",
                "parameters": [
                    {
                        "description": "request stay data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StayEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/Stay"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete stay by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stays"
                ],
                "summary": "Delete Stay",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay id",
                        "name": "stayId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/staysadvantage": {
            "post": {
                "description": "Create staysAdvantage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysAdvantage"
                ],
                "summary": "Create StaysAdvantage",
                "parameters": [
                    {
                        "description": "staysAdvantage request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StayAdvantageCreateReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/staysadvantage/{id}": {
            "delete": {
                "description": "Create staysAdvantage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysAdvantage"
                ],
                "summary": "Create StaysAdvantage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stay advantage id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/staysreviews": {
            "get": {
                "description": "Get all Stays reviews",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReviews"
                ],
                "summary": "Get all Stays review",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StaysReview"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create stays_review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReviews"
                ],
                "summary": "Create Stays_review",
                "parameters": [
                    {
                        "description": "stays review request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StaysReviewEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/staysreviews/{id}": {
            "get": {
                "description": "Get Stays review by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReviews"
                ],
                "summary": "Get Stays review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stays review id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/StaysReview"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a stays review by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReviews"
                ],
                "summary": "Update Stays Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the stays review to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details to update the stays review",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StaysReviewEntity"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated stays review",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "Stays review not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Stays_review by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staysReviews"
                ],
                "summary": "Delete Stays_review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "stays review id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "default": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/email/change": {
            "put": {
                "description": "Updates the user's email after validating the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user email by ID",
                "operationId": "updateUserEmailByID",
                "parameters": [
                    {
                        "description": "User's new email",
                        "name": "userEmail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email changed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or email validation failed",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "put": {
                "description": "Updates the user's password after verifying the OTP and checking its expiration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user password by email",
                "operationId": "updateUserPasswordByEmail",
                "parameters": [
                    {
                        "description": "User's new password and OTP",
                        "name": "userNewPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request or OTP verification failed",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/profile/picture": {
            "get": {
                "description": "Retrieves the profile picture path for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile picture",
                "operationId": "getUserPfp",
                "responses": {
                    "200": {
                        "description": "Path to the user's profile picture",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a new profile picture for the authenticated user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user profile picture",
                "operationId": "createUserPfp",
                "parameters": [
                    {
                        "type": "file",
                        "description": "User's profile picture (JPEG or PNG)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User pfp added successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or unsupported content type",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/profile/picture/{id}": {
            "get": {
                "description": "Retrieves the profile picture path for the specified user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile picture by ID",
                "operationId": "getUserPfpByUserID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Path to the user's profile picture",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete user avatar by user id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user avatar",
                "operationId": "deleteUserPfp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "no content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Change user avatar by id",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change user avatar",
                "operationId": "changeUserPfp",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User  ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "User's profile picture (JPEG or PNG)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User  not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/report/": {
            "get": {
                "description": "Retrieves all reports created by a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usersReports"
                ],
                "summary": "Get All User Reports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UsersReportEntity"
                            }
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"user not logged in\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"could not get reports\"}",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/report/{reportId}": {
            "delete": {
                "description": "Deletes a specified report created by a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usersReports"
                ],
                "summary": "Delete User Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the report to delete",
                        "name": "reportId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User report was deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates specific fields (title, description, or image) of an existing user report",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usersReports"
                ],
                "summary": "Update User Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the report to update",
                        "name": "reportId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New title for the report",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New description for the report",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "New image file (JPEG or PNG)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user report object",
                        "schema": {
                            "$ref": "#/definitions/UsersReportEntity"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/report/{toBlameId}": {
            "post": {
                "description": "Creates a user report with an optional image and necessary details such as title and description.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usersReports"
                ],
                "summary": "Create a new user report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user being reported",
                        "name": "toBlameId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Title of the report",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the report",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Optional image file (JPEG or PNG)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message confirming successful creation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input, missing fields, or unsupported image type",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, user not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Retrieves a user by the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "operationId": "getUserByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User  ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User  not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update a user with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user by ID",
                "operationId": "updateUserByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "model.User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a user with the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by ID",
                "operationId": "deleteUserByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted"
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        },
        "/users/report/{reportId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve detailed information about a specific user's report by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "usersReports"
                ],
                "summary": "Get a user's report by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report ID",
                        "name": "reportId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response containing user report data",
                        "schema": {
                            "$ref": "#/definitions/UsersReportEntity"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not logged in",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Advantage": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "Chat": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "operator_id": {
                    "type": "string"
                },
                "stay_owner_id": {
                    "type": "string"
                },
                "stay_user_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "Contract": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "date_end": {
                    "type": "string"
                },
                "date_start": {
                    "type": "string"
                },
                "entrance": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                },
                "house": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "room": {
                    "type": "string"
                },
                "square": {
                    "type": "number"
                },
                "stay_id": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "ContractResponse": {
            "type": "object",
            "properties": {
                "dateEnd": {
                    "type": "string",
                    "example": "2023-01-10T00:00:00Z"
                },
                "dateStart": {
                    "type": "string",
                    "example": "2023-01-01T00:00:00Z"
                }
            }
        },
        "Location": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "federal_district": {
                    "type": "string"
                },
                "fias_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "kladr_id": {
                    "type": "string"
                },
                "lat": {
                    "type": "string"
                },
                "lon": {
                    "type": "string"
                },
                "okato": {
                    "type": "string"
                },
                "oktmo": {
                    "type": "string"
                },
                "population": {
                    "type": "number"
                },
                "region_iso_code": {
                    "type": "string"
                },
                "region_name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "LocationEntity": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "federal_district": {
                    "type": "string"
                },
                "fias_id": {
                    "type": "string"
                },
                "kladr_id": {
                    "type": "string"
                },
                "lat": {
                    "type": "string"
                },
                "lon": {
                    "type": "string"
                },
                "okato": {
                    "type": "string"
                },
                "oktmo": {
                    "type": "string"
                },
                "population": {
                    "type": "number"
                },
                "region_iso_code": {
                    "type": "string"
                },
                "region_name": {
                    "type": "string"
                }
            }
        },
        "Login": {
            "type": "object",
            "required": [
                "email",
                "isHashed",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "isHashed": {
                    "type": "boolean",
                    "example": false
                },
                "password": {
                    "type": "string",
                    "example": "securepassword"
                }
            }
        },
        "Message": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "media": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "MessageEntity": {
            "type": "object",
            "properties": {
                "media": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "NewPassword": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "PasswordOTP": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "Registration": {
            "type": "object",
            "required": [
                "email",
                "isHashed",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "isHashed": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "securepassword"
                }
            }
        },
        "Reservation": {
            "type": "object",
            "properties": {
                "arrived": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "departure": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "stay_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "ReservationEntity": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "ReservationUpdateEntity": {
            "type": "object",
            "properties": {
                "arrived": {
                    "type": "string"
                },
                "departure": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "ResponseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "SearchHistory": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Stay": {
            "type": "object",
            "required": [
                "amenities"
            ],
            "properties": {
                "amenities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "entrance": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                },
                "guests": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_smoking_prohibited": {
                    "type": "boolean"
                },
                "location_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_bathrooms": {
                    "type": "integer"
                },
                "number_of_bedrooms": {
                    "type": "integer"
                },
                "number_of_beds": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "rating": {
                    "type": "number"
                },
                "room": {
                    "type": "string"
                },
                "square": {
                    "type": "number"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StayAdvantageCreateReq": {
            "type": "object",
            "properties": {
                "advantage_id": {
                    "type": "string"
                },
                "stay_id": {
                    "type": "string"
                }
            }
        },
        "StayEntity": {
            "type": "object",
            "required": [
                "amenities",
                "guests",
                "house",
                "location_id",
                "name",
                "number_of_bathrooms",
                "number_of_bedrooms",
                "number_of_beds",
                "price",
                "square",
                "street",
                "type",
                "user_id"
            ],
            "properties": {
                "amenities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "entrance": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                },
                "guests": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "is_smoking_prohibited": {
                    "type": "boolean",
                    "default": false
                },
                "location_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_bathrooms": {
                    "type": "integer"
                },
                "number_of_bedrooms": {
                    "type": "integer"
                },
                "number_of_beds": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "room": {
                    "type": "string"
                },
                "square": {
                    "type": "number"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StayEntityFav": {
            "type": "object",
            "required": [
                "amenities",
                "city",
                "guests",
                "house",
                "location_id",
                "name",
                "number_of_bathrooms",
                "number_of_bedrooms",
                "number_of_beds",
                "price",
                "square",
                "street",
                "type",
                "user_id"
            ],
            "properties": {
                "amenities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "city": {
                    "type": "string"
                },
                "entrance": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                },
                "guests": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_smoking_prohibited": {
                    "type": "boolean",
                    "default": false
                },
                "location_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_bathrooms": {
                    "type": "integer"
                },
                "number_of_bedrooms": {
                    "type": "integer"
                },
                "number_of_beds": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "room": {
                    "type": "string"
                },
                "square": {
                    "type": "number"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StayImage": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_name": {
                    "type": "string"
                },
                "is_main": {
                    "type": "boolean"
                },
                "stay_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "StayReport": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "report_attach": {
                    "type": "string"
                },
                "stay_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StayResponse": {
            "type": "object",
            "required": [
                "amenities"
            ],
            "properties": {
                "amenities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "entrance": {
                    "type": "string"
                },
                "floor": {
                    "type": "string"
                },
                "guests": {
                    "type": "integer"
                },
                "house": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StayImage"
                    }
                },
                "is_smoking_prohibited": {
                    "type": "boolean"
                },
                "location_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number_of_bathrooms": {
                    "type": "integer"
                },
                "number_of_bedrooms": {
                    "type": "integer"
                },
                "number_of_beds": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "rating": {
                    "type": "number"
                },
                "room": {
                    "type": "string"
                },
                "square": {
                    "type": "number"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StaysReportEntity": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "reportID": {
                    "type": "string"
                },
                "stayName": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "StaysReview": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "stay_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "StaysReviewEntity": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "stay_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "User": {
            "description": "User details",
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "birth_date": {
                    "$ref": "#/definitions/sql.NullTime"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "national": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "UsersReportEntity": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "owner_name": {
                    "type": "string"
                },
                "report_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "github_com_imperatorofdwelling_Full-backend_internal_domain_models_stays.Search": {
            "type": "object",
            "required": [
                "number_of_bedrooms",
                "price_max",
                "price_min",
                "rating",
                "type"
            ],
            "properties": {
                "amenities": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "number_of_bedrooms": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "price_max": {
                    "type": "number"
                },
                "price_min": {
                    "type": "number"
                },
                "rating": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "sql.NullTime": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "yoomodel.Amount": {
            "type": "object",
            "required": [
                "currency",
                "value"
            ],
            "properties": {
                "currency": {
                    "$ref": "#/definitions/yoomodel.Currency"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "yoomodel.AuthorizationDetails": {
            "type": "object",
            "required": [
                "three_d_secure"
            ],
            "properties": {
                "auth_code": {
                    "type": "string"
                },
                "rrn": {
                    "type": "string"
                },
                "three_d_secure": {
                    "$ref": "#/definitions/yoomodel.ThreeDSecure"
                }
            }
        },
        "yoomodel.BankCard": {
            "type": "object",
            "required": [
                "expiry_month",
                "expiry_year",
                "number"
            ],
            "properties": {
                "cardholder": {
                    "type": "string",
                    "maxLength": 26
                },
                "csc": {
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 3
                },
                "expiry_month": {
                    "type": "string",
                    "maxLength": 2
                },
                "expiry_year": {
                    "type": "string",
                    "maxLength": 4
                },
                "number": {
                    "type": "string"
                }
            }
        },
        "yoomodel.BankCardData": {
            "type": "object",
            "required": [
                "card_type",
                "expiry_month",
                "expiry_year",
                "last4"
            ],
            "properties": {
                "card_product": {
                    "$ref": "#/definitions/yoomodel.CardProduct"
                },
                "card_type": {
                    "type": "string",
                    "enum": [
                        "MasterCard",
                        "Visa",
                        "Mir",
                        "UnionPay",
                        "JCB",
                        "AmericanExpress",
                        "DinersClub",
                        "DiscoverCard",
                        "InstaPayment",
                        "InstaPaymentTM",
                        "Laser",
                        "Dankort",
                        "Solo",
                        "Switch",
                        "Unknown"
                    ]
                },
                "expiry_month": {
                    "type": "string",
                    "maxLength": 2
                },
                "expiry_year": {
                    "type": "string"
                },
                "first6": {
                    "type": "string"
                },
                "issuer_country": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "mir_pay",
                        "apple_pay",
                        "google_pay"
                    ]
                }
            }
        },
        "yoomodel.CancellationDetails": {
            "type": "object",
            "properties": {
                "party": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "yoomodel.CardProduct": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "yoomodel.Confirmation": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "confirmation_token": {
                    "type": "string"
                },
                "confirmation_url": {
                    "type": "string"
                },
                "enforce": {
                    "type": "boolean"
                },
                "locale": {
                    "type": "string",
                    "enum": [
                        "ru_RU",
                        "en_US"
                    ]
                },
                "return_url": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/yoomodel.ConfirmationType"
                }
            }
        },
        "yoomodel.ConfirmationType": {
            "type": "string",
            "enum": [
                "embedded",
                "external",
                "mobile_application",
                "qr",
                "redirect"
            ],
            "x-enum-varnames": [
                "Embedded",
                "External",
                "MobileApplication",
                "QR",
                "Redirect"
            ]
        },
        "yoomodel.Currency": {
            "type": "string",
            "enum": [
                "RUB",
                "USD"
            ],
            "x-enum-varnames": [
                "RUB",
                "USD"
            ]
        },
        "yoomodel.Customer": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 256
                },
                "inn": {
                    "type": "string"
                },
                "phone": {
                    "description": "TODO check phone format e164 with + before numbers",
                    "type": "string"
                }
            }
        },
        "yoomodel.Deal": {
            "type": "object",
            "required": [
                "id",
                "settlements"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "settlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/yoomodel.DealSettlement"
                    }
                }
            }
        },
        "yoomodel.DealSettlement": {
            "type": "object",
            "required": [
                "amount",
                "type"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "yoomodel.ElectronicCertificate": {
            "type": "object",
            "required": [
                "amount",
                "basket_id"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "basket_id": {
                    "type": "string"
                }
            }
        },
        "yoomodel.MarkQuantity": {
            "type": "object",
            "required": [
                "denominator",
                "numerator"
            ],
            "properties": {
                "denominator": {
                    "type": "integer",
                    "minimum": 1
                },
                "numerator": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "yoomodel.PayerBankDetails": {
            "type": "object",
            "required": [
                "bic"
            ],
            "properties": {
                "account": {
                    "type": "string"
                },
                "address": {
                    "type": "string",
                    "maxLength": 500
                },
                "bank_bik": {
                    "type": "string"
                },
                "bank_branch": {
                    "type": "string",
                    "maxLength": 140,
                    "minLength": 1
                },
                "bank_id": {
                    "type": "string",
                    "maxLength": 12
                },
                "bank_name": {
                    "type": "string",
                    "maxLength": 350,
                    "minLength": 1
                },
                "bic": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 800
                },
                "inn": {
                    "type": "string"
                },
                "kpp": {
                    "type": "string"
                },
                "short_name": {
                    "type": "string",
                    "maxLength": 160
                }
            }
        },
        "yoomodel.Payment": {
            "type": "object",
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "authorization_details": {
                    "$ref": "#/definitions/yoomodel.AuthorizationDetails"
                },
                "cancellation_details": {
                    "$ref": "#/definitions/yoomodel.CancellationDetails"
                },
                "capture": {
                    "type": "boolean"
                },
                "captured_at": {
                    "type": "string"
                },
                "confirmation": {
                    "$ref": "#/definitions/yoomodel.Confirmation"
                },
                "created_at": {
                    "type": "string"
                },
                "deal": {
                    "$ref": "#/definitions/yoomodel.Deal"
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "income_amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "merchant_customer_id": {
                    "type": "string",
                    "maxLength": 200
                },
                "metadata": {},
                "paid": {
                    "type": "boolean"
                },
                "payment_method": {
                    "$ref": "#/definitions/yoomodel.PaymentMethodData"
                },
                "receipt": {
                    "$ref": "#/definitions/yoomodel.Receipt"
                },
                "receipt_registration": {
                    "$ref": "#/definitions/yoomodel.TransactionStatus"
                },
                "recipient": {
                    "$ref": "#/definitions/yoomodel.Recipient"
                },
                "refundable": {
                    "type": "boolean"
                },
                "refunded_amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "status": {
                    "enum": [
                        "pending",
                        "waiting_for_capture",
                        "succeeded",
                        "canceled"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/yoomodel.TransactionStatus"
                        }
                    ]
                },
                "test": {
                    "type": "boolean"
                },
                "transfers": {
                    "$ref": "#/definitions/yoomodel.Transfers"
                }
            }
        },
        "yoomodel.PaymentMethod": {
            "type": "object",
            "required": [
                "id",
                "saved",
                "type"
            ],
            "properties": {
                "card": {
                    "$ref": "#/definitions/yoomodel.BankCardData"
                },
                "discount_amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "id": {
                    "type": "string"
                },
                "loan_option": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "payer_bank_details": {
                    "$ref": "#/definitions/yoomodel.PayerBankDetails"
                },
                "saved": {
                    "type": "boolean"
                },
                "sbp_operation_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/yoomodel.PaymentMethodType"
                }
            }
        },
        "yoomodel.PaymentMethodData": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "articles": {
                    "description": "TODO Create Articles struct",
                    "type": "array",
                    "items": {}
                },
                "card": {
                    "$ref": "#/definitions/yoomodel.BankCard"
                },
                "electronic_certificate": {
                    "$ref": "#/definitions/yoomodel.ElectronicCertificate"
                },
                "payment_purpose": {
                    "type": "string",
                    "maxLength": 210
                },
                "phone": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/yoomodel.PaymentMethodType"
                },
                "vat_data": {
                    "$ref": "#/definitions/yoomodel.VatData"
                }
            }
        },
        "yoomodel.PaymentMethodType": {
            "type": "string",
            "enum": [
                "sber_loan",
                "mobile_balance",
                "bank_card",
                "cash",
                "sbp",
                "b2b_sberbank",
                "electronic_certificate",
                "yoo_money",
                "sberbank",
                "tinkoff_bank",
                "alfabank",
                "installments",
                "apple_pay",
                "google_pay",
                "qiwi",
                "wechat",
                "webmoney"
            ],
            "x-enum-varnames": [
                "SberLoanType",
                "MobileBalanceType",
                "BankCardType",
                "CashType",
                "SBPType",
                "B2BSberType",
                "ElectronicCertType",
                "YooMoneyType",
                "SberPayType",
                "TinkoffBankType",
                "AlfabankType",
                "InstallmentsType",
                "ApplePayType",
                "GooglePayType",
                "QiwiType",
                "WechatType",
                "WebmoneyType"
            ]
        },
        "yoomodel.PaymentRes": {
            "type": "object",
            "required": [
                "amount",
                "created_at",
                "id",
                "paid",
                "recipient",
                "refundable",
                "status",
                "test"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "authorization_details": {
                    "$ref": "#/definitions/yoomodel.AuthorizationDetails"
                },
                "confirmation": {
                    "$ref": "#/definitions/yoomodel.Confirmation"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "income_amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "metadata": {},
                "paid": {
                    "type": "boolean"
                },
                "payment_method": {
                    "$ref": "#/definitions/yoomodel.PaymentMethod"
                },
                "recipient": {
                    "$ref": "#/definitions/yoomodel.Recipient"
                },
                "refundable": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/yoomodel.TransactionStatus"
                },
                "test": {
                    "type": "boolean"
                }
            }
        },
        "yoomodel.Receipt": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "customer": {
                    "$ref": "#/definitions/yoomodel.Customer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/yoomodel.ReceiptItem"
                    }
                },
                "receipt_industry_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/yoomodel.ReceiptIndustryDetail"
                    }
                },
                "receipt_operational_details": {
                    "$ref": "#/definitions/yoomodel.ReceiptOperationalDetails"
                },
                "tax_system_code": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 1
                }
            }
        },
        "yoomodel.ReceiptIndustryDetail": {
            "type": "object",
            "required": [
                "document_date",
                "document_number",
                "federal_id",
                "value"
            ],
            "properties": {
                "document_date": {
                    "type": "string"
                },
                "document_number": {
                    "type": "string",
                    "maxLength": 32
                },
                "federal_id": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "maxLength": 256
                }
            }
        },
        "yoomodel.ReceiptItem": {
            "type": "object",
            "required": [
                "amount",
                "description",
                "quantity",
                "vat_code"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "country_of_origin_code": {
                    "type": "string"
                },
                "customs_declaration_number": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 1
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "excise": {
                    "type": "string"
                },
                "mark_code_info": {
                    "description": "TODO create MarcCodeInfo struct"
                },
                "mark_mode": {
                    "type": "string"
                },
                "mark_quantity": {
                    "$ref": "#/definitions/yoomodel.MarkQuantity"
                },
                "measure": {
                    "type": "string"
                },
                "payment_mode": {
                    "type": "string"
                },
                "payment_subject": {
                    "type": "string"
                },
                "payment_subject_industry_details": {
                    "$ref": "#/definitions/yoomodel.ReceiptIndustryDetail"
                },
                "product_code": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "vat_code": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 1
                }
            }
        },
        "yoomodel.ReceiptOperationalDetails": {
            "type": "object",
            "required": [
                "created_at",
                "operation_id",
                "value"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "operation_id": {
                    "type": "integer",
                    "maximum": 255,
                    "minimum": 0
                },
                "value": {
                    "type": "string",
                    "maxLength": 64
                }
            }
        },
        "yoomodel.Recipient": {
            "type": "object",
            "required": [
                "gateway_id"
            ],
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "gateway_id": {
                    "type": "string"
                }
            }
        },
        "yoomodel.ThreeDSecure": {
            "type": "object",
            "required": [
                "applied"
            ],
            "properties": {
                "applied": {
                    "type": "boolean"
                }
            }
        },
        "yoomodel.TransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "waiting_for_capture",
                "succeeded",
                "canceled"
            ],
            "x-enum-varnames": [
                "Pending",
                "WaitingForCapture",
                "Succeeded",
                "Canceled"
            ]
        },
        "yoomodel.Transfers": {
            "type": "object",
            "required": [
                "account_id",
                "amount"
            ],
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "description": {
                    "type": "string",
                    "maxLength": 128
                },
                "metadata": {},
                "platform_fee_amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                }
            }
        },
        "yoomodel.VatData": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "amount": {
                    "$ref": "#/definitions/yoomodel.Amount"
                },
                "rate": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
