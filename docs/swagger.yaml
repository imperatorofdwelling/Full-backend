definitions:
  Advantage:
    properties:
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  Chat:
    properties:
      chat_id:
        type: string
      created_at:
        type: string
      operator_id:
        type: string
      stay_owner_id:
        type: string
      stay_user_id:
        type: string
      updated_at:
        type: string
    type: object
  Contract:
    properties:
      created_at:
        type: string
      date_end:
        type: string
      date_start:
        type: string
      entrance:
        type: string
      floor:
        type: string
      house:
        type: string
      price:
        type: number
      room:
        type: string
      square:
        type: number
      stay_id:
        type: string
      street:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  ContractResponse:
    properties:
      dateEnd:
        example: "2023-01-10T00:00:00Z"
        type: string
      dateStart:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  Location:
    properties:
      city:
        type: string
      createdAt:
        type: string
      federal_district:
        type: string
      fias_id:
        type: string
      id:
        type: string
      kladr_id:
        type: string
      lat:
        type: string
      lon:
        type: string
      okato:
        type: string
      oktmo:
        type: string
      population:
        type: number
      region_iso_code:
        type: string
      region_name:
        type: string
      updatedAt:
        type: string
    type: object
  LocationEntity:
    properties:
      city:
        type: string
      federal_district:
        type: string
      fias_id:
        type: string
      kladr_id:
        type: string
      lat:
        type: string
      lon:
        type: string
      okato:
        type: string
      oktmo:
        type: string
      population:
        type: number
      region_iso_code:
        type: string
      region_name:
        type: string
    type: object
  Login:
    properties:
      email:
        example: user@example.com
        type: string
      isHashed:
        example: false
        type: boolean
      password:
        example: securepassword
        type: string
    required:
    - email
    - isHashed
    - password
    type: object
  Message:
    properties:
      chat_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      media:
        type: string
      text:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  MessageEntity:
    properties:
      media:
        type: string
      text:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  NewPassword:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  PasswordOTP:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  Registration:
    properties:
      email:
        example: user@example.com
        type: string
      isHashed:
        example: false
        type: boolean
      name:
        example: John Doe
        type: string
      password:
        example: securepassword
        type: string
    required:
    - email
    - isHashed
    - name
    - password
    type: object
  Reservation:
    properties:
      arrived:
        type: string
      created_at:
        type: string
      departure:
        type: string
      id:
        type: string
      stay_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  ReservationEntity:
    properties:
      arrived:
        type: string
      departure:
        type: string
      stay_id:
        type: string
      user_id:
        type: string
    type: object
  ReservationUpdateEntity:
    properties:
      arrived:
        type: string
      departure:
        type: string
      id:
        type: string
    type: object
  ResponseError:
    properties:
      error:
        type: string
    type: object
  SearchHistory:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  Stay:
    properties:
      created_at:
        type: string
      entrance:
        type: string
      floor:
        type: string
      guests:
        type: integer
      house:
        type: string
      id:
        type: string
      is_smoking_prohibited:
        type: boolean
      location_id:
        type: string
      name:
        type: string
      number_of_bathrooms:
        type: integer
      number_of_bedrooms:
        type: integer
      number_of_beds:
        type: integer
      price:
        type: number
      rating:
        type: number
      room:
        type: string
      square:
        type: number
      street:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  StayAdvantageCreateReq:
    properties:
      advantage_id:
        type: string
      stay_id:
        type: string
    type: object
  StayEntity:
    properties:
      entrance:
        type: string
      floor:
        type: string
      guests:
        type: integer
      house:
        type: string
      is_smoking_prohibited:
        default: false
        type: boolean
      location_id:
        type: string
      name:
        type: string
      number_of_bathrooms:
        type: integer
      number_of_bedrooms:
        type: integer
      number_of_beds:
        type: integer
      price:
        type: number
      room:
        type: string
      square:
        type: number
      street:
        type: string
      type:
        type: string
      user_id:
        type: string
    required:
    - guests
    - house
    - location_id
    - name
    - number_of_bathrooms
    - number_of_bedrooms
    - number_of_beds
    - price
    - square
    - street
    - type
    - user_id
    type: object
  StayEntityFav:
    properties:
      city:
        type: string
      entrance:
        type: string
      floor:
        type: string
      guests:
        type: integer
      house:
        type: string
      id:
        type: string
      is_smoking_prohibited:
        default: false
        type: boolean
      location_id:
        type: string
      name:
        type: string
      number_of_bathrooms:
        type: integer
      number_of_bedrooms:
        type: integer
      number_of_beds:
        type: integer
      price:
        type: number
      room:
        type: string
      square:
        type: number
      street:
        type: string
      type:
        type: string
      user_id:
        type: string
    required:
    - city
    - guests
    - house
    - location_id
    - name
    - number_of_bathrooms
    - number_of_bedrooms
    - number_of_beds
    - price
    - square
    - street
    - type
    - user_id
    type: object
  StayImage:
    properties:
      created_at:
        type: string
      id:
        type: string
      image_name:
        type: string
      is_main:
        type: boolean
      stay_id:
        type: string
      updated_at:
        type: string
    type: object
  StayReport:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      report_attach:
        type: string
      stay_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  StayResponse:
    properties:
      created_at:
        type: string
      entrance:
        type: string
      floor:
        type: string
      guests:
        type: integer
      house:
        type: string
      id:
        type: string
      images:
        items:
          $ref: '#/definitions/StayImage'
        type: array
      is_smoking_prohibited:
        type: boolean
      location_id:
        type: string
      name:
        type: string
      number_of_bathrooms:
        type: integer
      number_of_bedrooms:
        type: integer
      number_of_beds:
        type: integer
      price:
        type: number
      rating:
        type: number
      room:
        type: string
      square:
        type: number
      street:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  StaysReportEntity:
    properties:
      description:
        type: string
      reportID:
        type: string
      stayName:
        type: string
      title:
        type: string
      userName:
        type: string
    type: object
  StaysReview:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      rating:
        type: number
      stay_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  StaysReviewEntity:
    properties:
      description:
        type: string
      rating:
        type: number
      stay_id:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  User:
    description: User details
    properties:
      avatar:
        items:
          type: integer
        type: array
      birth_date:
        $ref: '#/definitions/sql.NullTime'
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: string
      name:
        type: string
      national:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
    type: object
  UsersReportEntity:
    properties:
      description:
        type: string
      owner_name:
        type: string
      report_id:
        type: string
      title:
        type: string
      user_name:
        type: string
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /advantages/{advantageId}:
    delete:
      consumes:
      - application/json
      description: Delete advantage by id
      parameters:
      - description: advantage id
        in: path
        name: advantageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Advantage
      tags:
      - advantages
    patch:
      consumes:
      - application/json
      description: Update advantage by id
      parameters:
      - description: advantage id
        in: path
        name: advantageId
        required: true
        type: string
      - description: image file
        in: formData
        name: image
        type: file
      - description: title of advantage
        in: formData
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Advantage'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update Advantage
      tags:
      - advantages
  /advantages/all:
    get:
      consumes:
      - application/json
      description: Get all advantages
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Advantage'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get advantages
      tags:
      - advantages
  /advantages/create:
    post:
      consumes:
      - multipart/form-data
      description: Create advantage
      parameters:
      - description: image file
        in: formData
        name: image
        required: true
        type: file
      - description: title of advantage
        in: formData
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create Advantage
      tags:
      - advantages
  /chat:
    get:
      consumes:
      - application/json
      description: Retrieve all chats for a user by their user ID
      produces:
      - application/json
      responses:
        "200":
          description: List of chats for the user
          schema:
            items:
              $ref: '#/definitions/Chat'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Chats
      tags:
      - chats
  /chat/{chatId}:
    get:
      consumes:
      - application/json
      description: Retrieve all messages for a chat by its chat ID
      parameters:
      - description: The ID of the chat
        in: path
        name: chatId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messages for the chat
          schema:
            $ref: '#/definitions/MessageEntity'
        "404":
          description: Chat not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Messages by Chat ID
      tags:
      - chats
  /chat/{ownerId}:
    post:
      consumes:
      - application/json
      description: Send a message to a specified chat by its owner ID and user ID
      parameters:
      - description: The ID of the chat owner
        in: path
        name: ownerId
        required: true
        type: string
      - description: Message content to send
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/MessageEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Message sent!
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a message
      tags:
      - chats
  /chat/ws/{chatId}:
    get:
      consumes:
      - application/json
      description: Handles WebSocket connections, retrieves chat history, and supports
        real-time messaging.
      parameters:
      - description: JWT Token for authentication
        in: query
        name: token
        required: true
        type: string
      - description: Chat ID to retrieve messages from
        in: path
        name: chatId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: WebSocket connection established
          schema:
            type: string
        "400":
          description: Bad Request - Missing or invalid token
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - Invalid token or claims
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Establishes a WebSocket connection for chat
      tags:
      - webSocket
  /confirm/email/change/otp/{otp}:
    post:
      consumes:
      - application/json
      description: Verify the one-time password (OTP) provided by the user for email
        change confirmation
      parameters:
      - description: One-Time Password (OTP)
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP confirmed successfully!
          schema:
            type: string
        "400":
          description: Bad Request - invalid OTP
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error - could not verify OTP
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Confirm Email Change OTP
      tags:
      - auth
  /confirm/email/otp/{otp}:
    post:
      consumes:
      - application/json
      description: Verify the one-time password (OTP) provided by the user for email
        confirmation
      parameters:
      - description: One-Time Password (OTP)
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP confirmed successfully!
          schema:
            type: string
        "400":
          description: Bad Request - invalid OTP
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error - could not verify OTP
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Confirm One-Time Password (OTP)
      tags:
      - auth
  /confirm/password/otp:
    post:
      consumes:
      - application/json
      description: Verify the one-time password (OTP) provided by the user for password
        changing
      parameters:
      - description: Request body with email and otp
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/PasswordOTP'
      produces:
      - application/json
      responses:
        "200":
          description: OTP confirmed successfully!
          schema:
            type: string
        "400":
          description: Bad Request - invalid OTP or missing fields
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error - could not verify OTP
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Confirm One-Time Password (OTP)
      tags:
      - auth
  /contract:
    get:
      consumes:
      - application/json
      description: Retrieve all contracts for a user by their user ID
      produces:
      - application/json
      responses:
        "200":
          description: ok" // Adjust the type based on your actual Contract struct
          schema:
            items:
              $ref: '#/definitions/Contract'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get All Contracts
      tags:
      - contracts
  /contract/{stayId}:
    post:
      consumes:
      - application/json
      description: Create a new contract for a specific stay by user ID
      parameters:
      - description: The ID of the stay
        in: path
        name: stayId
        required: true
        type: string
      - description: Contract details including dateStart and dateEnd
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ContractResponse'
      produces:
      - application/json
      responses:
        "201":
          description: Contract created successfully with message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Add a New Contract
      tags:
      - contracts
    put:
      consumes:
      - application/json
      description: Update a contract for a specific stay by user ID
      parameters:
      - description: The ID of the stay
        in: path
        name: stayId
        required: true
        type: string
      - description: Contract details including dateStart and dateEnd
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ContractResponse'
      produces:
      - application/json
      responses:
        "200":
          description: Updated contract information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update an Existing Contract
      tags:
      - contracts
  /email/change/otp:
    get:
      consumes:
      - application/json
      description: Generate and send a one-time password (OTP) to the user's current
        email for changing their email address
      produces:
      - application/json
      responses:
        "200":
          description: otp for email change created!
          schema:
            type: string
        "401":
          description: Unauthorized - invalid user ID in context
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error - failed to send OTP for email change
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Send OTP for Email Change
      tags:
      - emailConfirmation
  /email/otp:
    get:
      consumes:
      - application/json
      description: Generate a one-time password (OTP) for email confirmation by user
        ID
      produces:
      - application/json
      responses:
        "200":
          description: success in creating otp for email verification!
          schema:
            type: string
        "401":
          description: Unauthorized - user not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error - could not generate OTP
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create One-Time Password (OTP)
      tags:
      - emailConfirmation
  /favourites:
    get:
      consumes:
      - application/json
      description: Retrieves a list of favourite stays for the user based on the user
        ID from context.
      produces:
      - application/json
      responses:
        "200":
          description: List of favourite stays
          schema:
            items:
              additionalProperties:
                $ref: '#/definitions/StayEntityFav'
              type: object
            type: array
        "401":
          description: User not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all favourite stays for a user
      tags:
      - favourites
  /favourites/{stayId}:
    delete:
      consumes:
      - application/json
      description: Remove a stay from the user's favourites list using their user
        ID from context and the stay ID from the URL.
      parameters:
      - description: ID of the stay to be removed from favourites
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully removed from favourites
          schema:
            type: string
        "401":
          description: User not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Remove a stay from user favourites
      tags:
      - favourites
    post:
      consumes:
      - application/json
      description: Add a stay to the user's favourites list using their user ID from
        context and the stay ID from the URL.
      parameters:
      - description: ID of the stay to be added to favourites
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to favourites
          schema:
            type: string
        "401":
          description: User not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Add a stay to user favourites
      tags:
      - favourites
  /history:
    get:
      consumes:
      - application/json
      description: Get all search history for a user by ID
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/SearchHistory'
            type: array
        "401":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Search History
      tags:
      - searchHistory
    post:
      consumes:
      - application/json
      description: Add a new entry to the search history for a user
      parameters:
      - description: Name of the search history entry
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: message
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create Search History
      tags:
      - searchHistory
  /locations:
    get:
      consumes:
      - application/json
      description: Get all locations
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Location'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all locations
      tags:
      - locations
  /locations/{id}:
    delete:
      consumes:
      - application/json
      description: Update location by id
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      - description: location request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/LocationEntity'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Location'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update location by id
      tags:
      - locations
    get:
      consumes:
      - application/json
      description: Find location by id
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Location'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Find location by id
      tags:
      - locations
  /locations/{locationName}:
    get:
      consumes:
      - application/json
      description: Find city by matching name
      parameters:
      - description: location name match
        in: path
        name: locationName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Location'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Find city by name
      tags:
      - locations
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates an existing user and returns a JWT token
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Login an existing user
      tags:
      - auth
  /message:
    get:
      consumes:
      - application/json
      description: Retrieve all messages for a user by their user ID
      produces:
      - application/json
      responses:
        "200":
          description: List of messages for the user
          schema:
            items:
              $ref: '#/definitions/MessageEntity'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Messages
      tags:
      - messages
  /message/{messageId}:
    delete:
      consumes:
      - application/json
      description: Delete a message by its message ID
      parameters:
      - description: The ID of the message
        in: path
        name: messageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Message deleted successfully
          schema:
            type: string
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Message by Message ID
      tags:
      - messages
    get:
      consumes:
      - application/json
      description: Retrieve a single message by its message ID
      parameters:
      - description: The ID of the message
        in: path
        name: messageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The message details
          schema:
            $ref: '#/definitions/Message'
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Message by Message ID
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Update an existing message by message ID
      parameters:
      - description: The ID of the message
        in: path
        name: messageId
        required: true
        type: string
      - description: Updated message content
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/MessageEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Updated message
          schema:
            $ref: '#/definitions/MessageEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update an Existing Message
      tags:
      - messages
  /password/otp/{email}:
    get:
      consumes:
      - application/json
      description: Generate a one-time password (OTP) for resetting the password using
        the provided email
      parameters:
      - description: Email of the user
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success in creating otp for password reset!
          schema:
            type: string
        "500":
          description: Internal Server Error - could not generate OTP
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create One-Time Password (OTP) for Password Reset
      tags:
      - emailConfirmation
  /registration:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: Registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/Registration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Register a new user
      tags:
      - auth
  /reservation:
    post:
      consumes:
      - application/json
      description: Create reservation (arrived and departure should be TIMESTAMP type)
      parameters:
      - description: Create reservation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ReservationEntity'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create Reservation
      tags:
      - reservations
  /reservation/{reservationID}:
    delete:
      consumes:
      - application/json
      description: Delete reservation by id
      parameters:
      - description: reservation id
        in: path
        name: reservationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Reservation
      tags:
      - reservations
    get:
      consumes:
      - application/json
      description: Get reservation by id
      parameters:
      - description: reservation id
        in: path
        name: reservationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Reservation'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Reservation
      tags:
      - reservations
  /reservation/{reservationId}:
    put:
      consumes:
      - application/json
      description: Update an existing reservation by its ID
      parameters:
      - description: ID of the reservation to update
        in: path
        name: reservationId
        required: true
        type: string
      - description: Details to update the reservation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ReservationUpdateEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated reservation
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Reservation not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update Reservation
      tags:
      - reservations
  /reservation/user/{userID}:
    get:
      consumes:
      - application/json
      description: Get reservation by user id
      parameters:
      - description: user id
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Reservation'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all Reservations
      tags:
      - reservations
  /stays:
    get:
      consumes:
      - application/json
      description: Get all stays
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/StayResponse'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all stays
      tags:
      - stays
    post:
      consumes:
      - application/json
      description: Create stay
      parameters:
      - description: request stay data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StayEntity'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create Stay
      tags:
      - stays
  /stays/{stayId}:
    delete:
      consumes:
      - application/json
      description: Delete stay by id
      parameters:
      - description: stay id
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Stay
      tags:
      - stays
    get:
      consumes:
      - application/json
      description: get stay
      parameters:
      - description: stay id
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Stay'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Stay by id
      tags:
      - stays
    put:
      consumes:
      - application/json
      description: Update stay by id
      parameters:
      - description: request stay data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StayEntity'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/Stay'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update Stay
      tags:
      - stays
  /stays/images:
    post:
      consumes:
      - multipart/form-data
      description: 'Create images (IMPORTANT: not main image). Form data with two
        rows: stay_id, images in array'
      parameters:
      - collectionFormat: csv
        description: images list in form data
        in: formData
        items:
          type: file
        name: images
        required: true
        type: array
      - description: stay id
        in: formData
        name: stay_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create images
      tags:
      - stays
  /stays/images/{imageId}:
    delete:
      consumes:
      - application/json
      description: Delete image by id
      parameters:
      - description: stay image id
        in: path
        name: imageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete image by id
      tags:
      - stays
  /stays/images/{stayId}:
    get:
      consumes:
      - application/json
      description: Get stays images by stay id
      parameters:
      - description: stay id
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/StayImage'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all stays images by stay id
      tags:
      - stays
  /stays/images/main:
    post:
      consumes:
      - multipart/form-data
      description: 'Create main image (IMPORTANT: should be one main image). If main
        image already exists in stay, it will be replaced with this new image. The
        old replaced image will no longer be the main and "is_main" value replaced
        to false. Request data should be in Form data with two values: images and
        stay_id. Note, that images row is one image (not array)'
      parameters:
      - description: images
        in: formData
        name: images
        required: true
        type: file
      - description: stay id
        in: formData
        name: stay_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create main image
      tags:
      - stays
  /stays/images/main/{stayId}:
    get:
      consumes:
      - application/json
      description: Get main stays image by stay id
      parameters:
      - description: stay id
        in: path
        name: stayId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/StayImage'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get main stays image by stay id
      tags:
      - stays
  /stays/location/{locationId}:
    get:
      consumes:
      - application/json
      description: get stays by location id. Handler additionally checks is location
        exist.
      parameters:
      - description: stay id
        in: path
        name: locationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Stay'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Stays by location id
      tags:
      - stays
  /stays/report:
    get:
      description: Retrieves all stay reports for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/StaysReportEntity'
            type: array
        "401":
          description: '{"error": "user not logged in"}'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: '{"error": "message"}'
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all stay reports
      tags:
      - staysReports
  /stays/report/{reportId}:
    delete:
      description: Deletes a specific stay report by report ID
      parameters:
      - description: Report ID
        in: path
        name: reportId
        required: true
        type: string
      responses:
        "200":
          description: '{"message": "Stay report was deleted"}'
          schema:
            type: string
        "401":
          description: '{"error": "user not logged in"}'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: '{"error": "message"}'
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete a stay report
      tags:
      - staysReports
    patch:
      consumes:
      - multipart/form-data
      description: Updates specific fields of a stay report, such as title, description,
        or image
      parameters:
      - description: Report ID
        in: path
        name: reportId
        required: true
        type: string
      - description: Updated title
        in: formData
        name: title
        type: string
      - description: Updated description
        in: formData
        name: description
        type: string
      - description: Image file (JPEG or PNG)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Updated stays report object
          schema:
            $ref: '#/definitions/StaysReportEntity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Partially update a stay report
      tags:
      - staysReports
  /stays/report/{stayId}:
    get:
      description: Fetches a specific stay report associated with the logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: Retrieved stay report object
          schema:
            $ref: '#/definitions/StayReport'
        "401":
          description: '{"error": "user not logged in"}'
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: '{"error": "report not found"}'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: '{"error": "could not fetch report"}'
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Retrieve stay report by user ID
      tags:
      - staysReports
    post:
      consumes:
      - multipart/form-data
      description: Creates a report for a specific stay, including an optional image
        and required details like title and description.
      parameters:
      - description: ID of the stay being reported
        in: path
        name: stayId
        required: true
        type: string
      - description: Title of the report
        in: formData
        name: title
        required: true
        type: string
      - description: Description of the report
        in: formData
        name: description
        required: true
        type: string
      - description: image file (JPEG or PNG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Confirmation message
          schema:
            type: string
        "400":
          description: Error message for invalid input or unsupported image type
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Error message for unauthorized access
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error message for internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new stay report
      tags:
      - staysReports
  /stays/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get stays by user id
      parameters:
      - description: user id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/Stay'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all stays by user id
      tags:
      - stays
  /staysadvantage:
    post:
      consumes:
      - application/json
      description: Create staysAdvantage
      parameters:
      - description: staysAdvantage request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StayAdvantageCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create StaysAdvantage
      tags:
      - staysAdvantage
  /staysadvantage/{id}:
    delete:
      consumes:
      - application/json
      description: Create staysAdvantage
      parameters:
      - description: stay advantage id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create StaysAdvantage
      tags:
      - staysAdvantage
  /staysreviews:
    get:
      consumes:
      - application/json
      description: Get all Stays reviews
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/StaysReview'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get all Stays review
      tags:
      - staysReviews
    post:
      consumes:
      - application/json
      description: Create stays_review
      parameters:
      - description: stays review request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StaysReviewEntity'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create Stays_review
      tags:
      - staysReviews
  /staysreviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Stays_review by id
      parameters:
      - description: stays review id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete Stays_review
      tags:
      - staysReviews
    get:
      consumes:
      - application/json
      description: Get Stays review by id
      parameters:
      - description: stays review id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/StaysReview'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get Stays review
      tags:
      - staysReviews
    put:
      consumes:
      - application/json
      description: Update a stays review by its ID
      parameters:
      - description: ID of the stays review to update
        in: path
        name: id
        required: true
        type: string
      - description: Details to update the stays review
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/StaysReviewEntity'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated stays review
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: Stays review not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update Stays Review
      tags:
      - staysReviews
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the provided ID
      operationId: deleteUserByID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User successfully deleted
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user by the provided ID
      operationId: getUserByID
      parameters:
      - description: User  ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: User  not found
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user with the provided ID
      operationId: updateUserByID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: model.User
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update a user by ID
      tags:
      - users
  /user/password:
    put:
      consumes:
      - application/json
      description: Updates the user's password after verifying the OTP and checking
        its expiration
      operationId: updateUserPasswordByEmail
      parameters:
      - description: User's new password and OTP
        in: body
        name: userNewPassword
        required: true
        schema:
          $ref: '#/definitions/NewPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid request or OTP verification failed
          schema:
            $ref: '#/definitions/ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update user password by email
      tags:
      - users
  /user/profile/picture:
    get:
      description: Retrieves the profile picture path for the authenticated user
      operationId: getUserPfp
      produces:
      - application/json
      responses:
        "200":
          description: Path to the user's profile picture
          schema:
            type: string
        "401":
          description: User not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get user profile picture
      tags:
      - users
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new profile picture for the authenticated user
      operationId: createUserPfp
      parameters:
      - description: User's profile picture (JPEG or PNG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: User pfp added successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or unsupported content type
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: User not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create user profile picture
      tags:
      - users
  /user/report/:
    get:
      description: Retrieves all reports created by a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/UsersReportEntity'
            type: array
        "401":
          description: '{"error": "user not logged in"}'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: '{"error": "could not get reports"}'
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get All User Reports
      tags:
      - usersReports
  /user/report/{reportId}:
    delete:
      description: Deletes a specified report created by a user
      parameters:
      - description: ID of the report to delete
        in: path
        name: reportId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User report was deleted
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Delete User Report
      tags:
      - usersReports
    patch:
      consumes:
      - multipart/form-data
      description: Updates specific fields (title, description, or image) of an existing
        user report
      parameters:
      - description: ID of the report to update
        in: path
        name: reportId
        required: true
        type: string
      - description: New title for the report
        in: formData
        name: title
        type: string
      - description: New description for the report
        in: formData
        name: description
        type: string
      - description: New image file (JPEG or PNG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Updated user report object
          schema:
            $ref: '#/definitions/UsersReportEntity'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update User Report
      tags:
      - usersReports
  /user/report/{toBlameId}:
    post:
      consumes:
      - multipart/form-data
      description: Creates a user report with an optional image and necessary details
        such as title and description.
      parameters:
      - description: ID of the user being reported
        in: path
        name: toBlameId
        required: true
        type: string
      - description: Title of the report
        in: formData
        name: title
        required: true
        type: string
      - description: Description of the report
        in: formData
        name: description
        required: true
        type: string
      - description: Optional image file (JPEG or PNG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Message confirming successful creation
          schema:
            type: string
        "400":
          description: Invalid input, missing fields, or unsupported image type
          schema:
            $ref: '#/definitions/ResponseError'
        "401":
          description: Unauthorized, user not logged in
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new user report
      tags:
      - usersReports
  /users/report/{reportId}:
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about a specific user's report by
        its unique ID.
      parameters:
      - description: Report ID
        in: path
        name: reportId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response containing user report data
          schema:
            $ref: '#/definitions/UsersReportEntity'
        "401":
          description: 'Unauthorized: User not logged in'
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get a user's report by ID
      tags:
      - usersReports
swagger: "2.0"
