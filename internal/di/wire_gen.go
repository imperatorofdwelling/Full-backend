// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/imperatorofdwelling/Full-backend/internal/api"
	"github.com/imperatorofdwelling/Full-backend/internal/config"
	"github.com/imperatorofdwelling/Full-backend/internal/db"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/models/connectionmanager"
	providers2 "github.com/imperatorofdwelling/Full-backend/internal/domain/providers/advantage"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/auth"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/chat"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/confirmEmail"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/contracts"
	user2 "github.com/imperatorofdwelling/Full-backend/internal/domain/providers/favourite"
	providers3 "github.com/imperatorofdwelling/Full-backend/internal/domain/providers/file"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/location"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/message"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/reservation"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/searchhistory"
	providers4 "github.com/imperatorofdwelling/Full-backend/internal/domain/providers/stays"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/staysadvantage"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/staysreports"
	providers5 "github.com/imperatorofdwelling/Full-backend/internal/domain/providers/staysreviews"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/user"
	"github.com/imperatorofdwelling/Full-backend/internal/domain/providers/usersreports"
	"log/slog"
)

// Injectors from wire.go:

func InitializeAPI(cfg *config.Config, log *slog.Logger) (*api.ServerHTTP, error) {
	sqlDB, err := db.ConnectToBD(cfg)
	if err != nil {
		return nil, err
	}
	repository := auth.ProvideAuthRepository(sqlDB)
	userRepository := user.ProvideUserRepository(sqlDB)
	repo := confirmEmail.ProvideConfirmEmailRepo(sqlDB)
	service := auth.ProvideAuthService(repository, userRepository, repo)
	authHandler := auth.ProvideAuthHandler(service, log)
	userService := user.ProvideUserService(userRepository)
	userHandler := user.ProvideUserHandler(userService, log)
	locationRepo := providers.ProvideLocationRepository(sqlDB)
	locationService := providers.ProvideLocationService(locationRepo)
	handler := providers.ProvideLocationHandler(locationService, log)
	advantageRepo := providers2.ProvideAdvantageRepository(sqlDB)
	fileService := providers3.ProvideFileService()
	advantageService := providers2.ProvideAdvantageService(advantageRepo, fileService)
	advantageHandler := providers2.ProvideAdvantageHandler(advantageService, log)
	staysRepo := providers4.ProvideStaysRepo(sqlDB)
	staysService := providers4.ProvideStaysService(staysRepo, locationService, fileService, userService)
	staysHandler := providers4.ProvideStaysHandler(staysService, log)
	staysadvantageRepo := staysadvantage.ProvideStaysAdvantageRepo(sqlDB)
	staysadvantageService := staysadvantage.ProvideStaysAdvantageService(staysadvantageRepo, staysService, advantageService)
	staysadvantageHandler := staysadvantage.ProvideStaysAdvantageHandler(staysadvantageService, log)
	reservationRepo := reservation.ProvideReservationRepository(sqlDB)
	reservationService := reservation.ProvideReservationService(reservationRepo)
	reservationHandler := reservation.ProvideReservationHandler(reservationService, log)
	staysreviewsRepo := providers5.ProvideStaysReviewsRepository(sqlDB)
	staysreviewsService := providers5.ProvideStaysReviewsService(staysreviewsRepo)
	staysreviewsHandler := providers5.ProvideStaysReviewsHandler(staysreviewsService, log)
	favouriteRepo := user2.ProvideFavouriteRepository(sqlDB)
	favouriteService := user2.ProvideFavouriteService(favouriteRepo)
	favHandler := user2.ProvideFavouriteHandler(favouriteService, log)
	searchhistoryRepo := searchhistory.ProvideSearchHistoryRepository(sqlDB)
	searchhistoryService := searchhistory.ProvideSearchHistoryService(searchhistoryRepo)
	searchhistoryHandler := searchhistory.ProvideSearchHistoryHandler(searchhistoryService, log)
	contractsRepo := contracts.ProvideContractRepository(sqlDB)
	contractsService := contracts.ProvideContractService(contractsRepo)
	contractsHandler := contracts.ProvideContractHandler(contractsService, log)
	staysreportsRepo := staysreports.ProvideStaysReportRepo(sqlDB)
	staysreportsService := staysreports.ProvideStaysReportService(staysreportsRepo, fileService)
	staysreportsHandler := staysreports.ProvideStaysReportHandler(staysreportsService, log)
	usersreportsRepo := usersreports.ProvideUsersReportRepo(sqlDB)
	usersreportsService := usersreports.ProvideUsersReportService(usersreportsRepo, fileService)
	usersreportsHandler := usersreports.ProvideUsersReportHandler(usersreportsService, log)
	messageRepo := message.ProvideMessageRepo(sqlDB)
	messageService := message.ProvideMessageService(messageRepo)
	messageHandler := message.ProvideMessageHandler(messageService, log)
	chatRepo := chat.ProvideChatRepo(sqlDB)
	chatService := chat.ProvideChatService(chatRepo)
	connectionManager := connectionmanager.NewConnectionManager()
	chatHandler := chat.ProvideChatHandler(chatService, log, connectionManager)
	fileHandler := providers3.ProvideFileHandler(fileService, log)
	confirmEmailService := confirmEmail.ProvideConfirmEmailService(repo)
	confirmEmailHandler := confirmEmail.ProvideConfirmEmailHandler(confirmEmailService, log)
	serverHTTP := api.NewServerHTTP(cfg, authHandler, userHandler, handler, advantageHandler, staysHandler, staysadvantageHandler, reservationHandler, staysreviewsHandler, favHandler, searchhistoryHandler, contractsHandler, staysreportsHandler, usersreportsHandler, messageHandler, chatHandler, fileHandler, confirmEmailHandler)
	return serverHTTP, nil
}
