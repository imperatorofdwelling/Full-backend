// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	chat "github.com/imperatorofdwelling/Full-backend/internal/domain/models/chat"

	message "github.com/imperatorofdwelling/Full-backend/internal/domain/models/message"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// GetChatByChatID provides a mock function with given fields: ctx, chatID
func (_m *ChatRepository) GetChatByChatID(ctx context.Context, chatID string) (*chat.Chat, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByChatID")
	}

	var r0 *chat.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*chat.Chat, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *chat.Chat); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatsByUserID provides a mock function with given fields: ctx, userID
func (_m *ChatRepository) GetChatsByUserID(ctx context.Context, userID string) ([]*chat.Chat, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserID")
	}

	var r0 []*chat.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*chat.Chat, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*chat.Chat); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chat.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByChatID provides a mock function with given fields: ctx, chatID
func (_m *ChatRepository) GetMessagesByChatID(ctx context.Context, chatID string) ([]*message.Entity, error) {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByChatID")
	}

	var r0 []*message.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*message.Entity, error)); ok {
		return rf(ctx, chatID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*message.Entity); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*message.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateChatID provides a mock function with given fields: ctx, userID, otherUserID
func (_m *ChatRepository) GetOrCreateChatID(ctx context.Context, userID string, otherUserID string) (*string, error) {
	ret := _m.Called(ctx, userID, otherUserID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateChatID")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*string, error)); ok {
		return rf(ctx, userID, otherUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = rf(ctx, userID, otherUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, otherUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, senderId, receiverId, msg
func (_m *ChatRepository) SendMessage(ctx context.Context, senderId string, receiverId string, msg message.Entity) error {
	ret := _m.Called(ctx, senderId, receiverId, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, message.Entity) error); ok {
		r0 = rf(ctx, senderId, receiverId, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessageInChat provides a mock function with given fields: ctx, chatId, senderId, msg
func (_m *ChatRepository) SendMessageInChat(ctx context.Context, chatId string, senderId string, msg message.Entity) error {
	ret := _m.Called(ctx, chatId, senderId, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageInChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, message.Entity) error); ok {
		r0 = rf(ctx, chatId, senderId, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
