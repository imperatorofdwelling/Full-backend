// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	chat "github.com/imperatorofdwelling/Full-backend/internal/domain/models/chat"

	message "github.com/imperatorofdwelling/Full-backend/internal/domain/models/message"

	mock "github.com/stretchr/testify/mock"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// GetChatByChatID provides a mock function with given fields: ctx, chatID
func (_m *ChatService) GetChatByChatID(ctx context.Context, chatID string) (*chat.Chat, error) {
	ret := _m.Called(ctx, chatID)

	var r0 *chat.Chat
	if rf, ok := ret.Get(0).(func(context.Context, string) *chat.Chat); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatsByUserID provides a mock function with given fields: ctx, userID
func (_m *ChatService) GetChatsByUserID(ctx context.Context, userID string) ([]*chat.Chat, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*chat.Chat
	if rf, ok := ret.Get(0).(func(context.Context, string) []*chat.Chat); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chat.Chat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByChatID provides a mock function with given fields: ctx, chatID
func (_m *ChatService) GetMessagesByChatID(ctx context.Context, chatID string) ([]*message.Entity, error) {
	ret := _m.Called(ctx, chatID)

	var r0 []*message.Entity
	if rf, ok := ret.Get(0).(func(context.Context, string) []*message.Entity); ok {
		r0 = rf(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*message.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateChatID provides a mock function with given fields: ctx, userID, otherUserID
func (_m *ChatService) GetOrCreateChatID(ctx context.Context, userID string, otherUserID string) (*string, error) {
	ret := _m.Called(ctx, userID, otherUserID)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *string); ok {
		r0 = rf(ctx, userID, otherUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, otherUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, senderId, receiverId, msg
func (_m *ChatService) SendMessage(ctx context.Context, senderId string, receiverId string, msg message.Entity) error {
	ret := _m.Called(ctx, senderId, receiverId, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, message.Entity) error); ok {
		r0 = rf(ctx, senderId, receiverId, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessageInChat provides a mock function with given fields: ctx, chatId, senderId, msg
func (_m *ChatService) SendMessageInChat(ctx context.Context, chatId string, senderId string, msg message.Entity) error {
	ret := _m.Called(ctx, chatId, senderId, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, message.Entity) error); ok {
		r0 = rf(ctx, chatId, senderId, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatService interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatService creates a new instance of ChatService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatService(t mockConstructorTestingTNewChatService) *ChatService {
	mock := &ChatService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
