// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	stays "github.com/imperatorofdwelling/Full-backend/internal/domain/models/stays"
)

// FavouriteRepo is an autogenerated mock type for the FavouriteRepo type
type FavouriteRepo struct {
	mock.Mock
}

// AddFavourite provides a mock function with given fields: ctx, userId, stayID
func (_m *FavouriteRepo) AddFavourite(ctx context.Context, userId string, stayID string) error {
	ret := _m.Called(ctx, userId, stayID)

	if len(ret) == 0 {
		panic("no return value specified for AddFavourite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, stayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllFavourites provides a mock function with given fields: ctx, userID
func (_m *FavouriteRepo) GetAllFavourites(ctx context.Context, userID string) ([]stays.StayEntityFav, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFavourites")
	}

	var r0 []stays.StayEntityFav
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]stays.StayEntityFav, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []stays.StayEntityFav); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stays.StayEntityFav)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFavourite provides a mock function with given fields: ctx, userID, stayID
func (_m *FavouriteRepo) RemoveFavourite(ctx context.Context, userID string, stayID string) error {
	ret := _m.Called(ctx, userID, stayID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFavourite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, stayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFavouriteRepo creates a new instance of FavouriteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFavouriteRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *FavouriteRepo {
	mock := &FavouriteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
