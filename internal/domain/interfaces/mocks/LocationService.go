// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/imperatorofdwelling/Website-backend/internal/domain/models"
)

// LocationService is an autogenerated mock type for the LocationService type
type LocationService struct {
	mock.Mock
}

// FindByNameMatch provides a mock function with given fields: ctx, match
func (_m *LocationService) FindByNameMatch(ctx context.Context, match string) (*[]models.Location, error) {
	ret := _m.Called(ctx, match)

	if len(ret) == 0 {
		panic("no return value specified for FindByNameMatch")
	}

	var r0 *[]models.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]models.Location, error)); ok {
		return rf(ctx, match)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]models.Location); ok {
		r0 = rf(ctx, match)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, match)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocationService creates a new instance of LocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationService {
	mock := &LocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
