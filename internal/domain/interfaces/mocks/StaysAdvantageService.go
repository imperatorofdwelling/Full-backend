// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	staysadvantage "github.com/imperatorofdwelling/Full-backend/internal/domain/models/staysadvantage"

	uuid "github.com/gofrs/uuid"
)

// StaysAdvantageService is an autogenerated mock type for the StaysAdvantageService type
type StaysAdvantageService struct {
	mock.Mock
}

// CreateStaysAdvantage provides a mock function with given fields: ctx, req
func (_m *StaysAdvantageService) CreateStaysAdvantage(ctx context.Context, req *staysadvantage.StayAdvantageCreateReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateStaysAdvantage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *staysadvantage.StayAdvantageCreateReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStaysAdvantageByID provides a mock function with given fields: ctx, id
func (_m *StaysAdvantageService) DeleteStaysAdvantageByID(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStaysAdvantageByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStaysAdvantageService creates a new instance of StaysAdvantageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStaysAdvantageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StaysAdvantageService {
	mock := &StaysAdvantageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
